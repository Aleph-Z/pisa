"use strict";
/* IMPORT */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var Caporal = require("caporal");
var chalk_1 = require("chalk");
var readPkg = require("read-pkg-up");
var updateNotifier = require("update-notifier");
var _1 = require(".");
var caporal = Caporal;
/* CLI */
function CLI() {
    return __awaiter(this, void 0, void 0, function () {
        var pkg, app, command, helpLines;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, readPkg({ cwd: __dirname })];
                case 1:
                    pkg = (_a.sent()).pkg;
                    updateNotifier({ pkg: pkg }).notify();
                    app = caporal.version(pkg.version);
                    /* COMMANDS */
                    app.option('--config, -c <path|object>', 'Path to configuration file or plain JSON object')
                        .option('--force', 'Force the command without prompting the user')
                        .option('--silent', 'Minimize the amount of logs')
                        .option('--no-scripts', 'Disable scripts')
                        .option('--prebump <script>', 'Script to execute before bumping the version')
                        .option('--prechangelog <script>', 'Script to execute before updating the changelog')
                        .option('--precommit <script>', 'Script to execute before making the commit')
                        .option('--pretag <script>', 'Script to execute before tagging the commit')
                        .option('--prerelease <script>', 'Script to execute before releasing')
                        .option('--postbump <script>', 'Script to execute after bumping the version')
                        .option('--postchangelog <script>', 'Script to execute after updating the changelog')
                        .option('--postcommit <script>', 'Script to execute after making the commit')
                        .option('--posttag <script>', 'Script to execute after tagging the commit')
                        .option('--postrelease <script>', 'Script to execute after releasing')
                        .argument('[version|increment]', 'Next version or supported increment name')
                        .action(function () { return _1.default(); })
                        /* VERSION */
                        .command('version', 'Only bump the version number')
                        .option('--config, -c <path|object>', 'Path to configuration file or plain JSON object')
                        .option('--force', 'Force the command without prompting the user')
                        .option('--silent', 'Minimize the amount of logs')
                        .option('--no-scripts', 'Disable scripts')
                        .option('--prebump <script>', 'Script to execute before bumping the version')
                        .option('--postbump <script>', 'Script to execute after bumping the version')
                        .argument('[version|increment]', 'Next version or supported increment name')
                        .action(function () { return _1.default({ version: true }); })
                        /* CHANGELOG */
                        .command('changelog', 'Only update the changelog')
                        .option('--config, -c <path|object>', 'Path to configuration file or plain JSON object')
                        .option('--force', 'Force the command without prompting the user')
                        .option('--silent', 'Minimize the amount of logs')
                        .option('--no-scripts', 'Disable scripts')
                        .option('--prechangelog <script>', 'Script to execute before updating the changelog')
                        .option('--postchangelog <script>', 'Script to execute after updating the changelog')
                        .action(function () { return _1.default({ changelog: true }); })
                        /* COMMIT */
                        .command('commit', 'Only make the commit')
                        .option('--config, -c <path|object>', 'Path to configuration file or plain JSON object')
                        .option('--force', 'Force the command without prompting the user')
                        .option('--silent', 'Minimize the amount of logs')
                        .option('--no-scripts', 'Disable scripts')
                        .option('--precommit <script>', 'Script to execute before making the commit')
                        .option('--postcommit <script>', 'Script to execute after making the commit')
                        .action(function () { return _1.default({ commit: true }); })
                        /* TAG */
                        .command('tag', 'Only tag the commit')
                        .option('--config, -c <path|object>', 'Path to configuration file or plain JSON object')
                        .option('--force', 'Force the command without prompting the user')
                        .option('--silent', 'Minimize the amount of logs')
                        .option('--no-scripts', 'Disable scripts')
                        .option('--pretag <script>', 'Script to execute before tagging the commit')
                        .option('--posttag <script>', 'Script to execute after tagging the commit')
                        .action(function () { return _1.default({ tag: true }); })
                        /* RELEASE */
                        .command('release', 'Only make the release')
                        .option('--config, -c <path|object>', 'Path to configuration file or plain JSON object')
                        .option('--force', 'Force the command without prompting the user')
                        .option('--silent', 'Minimize the amount of logs')
                        .option('--no-scripts', 'Disable scripts')
                        .option('--prerelease <script>', 'Script to execute before releasing')
                        .option('--postrelease <script>', 'Script to execute after releasing')
                        .action(function () { return _1.default({ release: true }); });
                    command = app['_defaultCommand'];
                    helpLines = [
                        "bump " + chalk_1.default.yellow('minor'),
                        "bump " + chalk_1.default.yellow('1.0.1'),
                        "bump " + chalk_1.default.green('--config') + " " + chalk_1.default.blue('./conf/bump.json') + " " + chalk_1.default.green('--force') + " " + chalk_1.default.green('--silent'),
                        "bump " + chalk_1.default.magenta('tag') + " " + chalk_1.default.green('--posttag') + " " + chalk_1.default.blue('"echo Done!"'),
                        "bump " + chalk_1.default.magenta('release') + " " + chalk_1.default.green('--prerelease') + " " + chalk_1.default.blue('"npm run build"') + " " + chalk_1.default.green('--postrelease') + " " + chalk_1.default.blue('"npm publish"')
                    ];
                    command.help(helpLines.join('\n'), { name: 'USAGE - ADVANCED' });
                    /* PARSE */
                    caporal.parse(process.argv);
                    return [2 /*return*/];
            }
        });
    });
}
/* EXPORT */
exports.default = CLI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NsaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsWUFBWTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVaLGlDQUFtQztBQUNuQywrQkFBMEI7QUFDMUIscUNBQXVDO0FBQ3ZDLGdEQUFrRDtBQUNsRCxzQkFBcUI7QUFFckIsSUFBTSxPQUFPLEdBQUcsT0FBYyxDQUFDO0FBRS9CLFNBQVM7QUFFVCxTQUFlLEdBQUc7Ozs7O3dCQUlGLHFCQUFNLE9BQU8sQ0FBRSxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsQ0FBQyxFQUFBOztvQkFBekMsR0FBRyxHQUFJLENBQUEsU0FBa0MsQ0FBQSxJQUF0QztvQkFFVixjQUFjLENBQUUsRUFBRSxHQUFHLEtBQUEsRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFHLENBQUM7b0JBRTdCLEdBQUcsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUUsQ0FBQztvQkFFNUMsY0FBYztvQkFFZCxHQUFHLENBQUMsTUFBTSxDQUFHLDRCQUE0QixFQUFFLGlEQUFpRCxDQUFFO3lCQUMxRixNQUFNLENBQUcsU0FBUyxFQUFFLDhDQUE4QyxDQUFFO3lCQUNwRSxNQUFNLENBQUcsVUFBVSxFQUFFLDZCQUE2QixDQUFFO3lCQUNwRCxNQUFNLENBQUcsY0FBYyxFQUFFLGlCQUFpQixDQUFFO3lCQUM1QyxNQUFNLENBQUcsb0JBQW9CLEVBQUUsOENBQThDLENBQUU7eUJBQy9FLE1BQU0sQ0FBRyx5QkFBeUIsRUFBRSxpREFBaUQsQ0FBRTt5QkFDdkYsTUFBTSxDQUFHLHNCQUFzQixFQUFFLDRDQUE0QyxDQUFFO3lCQUMvRSxNQUFNLENBQUcsbUJBQW1CLEVBQUUsNkNBQTZDLENBQUU7eUJBQzdFLE1BQU0sQ0FBRyx1QkFBdUIsRUFBRSxvQ0FBb0MsQ0FBRTt5QkFDeEUsTUFBTSxDQUFHLHFCQUFxQixFQUFF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